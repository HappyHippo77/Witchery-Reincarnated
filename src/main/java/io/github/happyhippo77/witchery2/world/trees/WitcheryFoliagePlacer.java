package io.github.happyhippo77.witchery2.world.trees;

import com.eliotlash.mclib.math.functions.classic.Mod;
import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import io.github.happyhippo77.witchery2.block.ModBlocks;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.intprovider.IntProvider;
import net.minecraft.util.math.random.Random;
import net.minecraft.world.TestableWorld;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.TreeFeatureConfig;
import net.minecraft.world.gen.foliage.FoliagePlacer;
import net.minecraft.world.gen.foliage.FoliagePlacerType;

public class WitcheryFoliagePlacer extends FoliagePlacer {
    static final byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};

    // For an example of creating your own type of codec, see the IntProvider.createValidatingCodec method's source
    // For the foliageHeight we use a codec generated by IntProvider.createValidatingCodec
    // As the method's arguments, we pass in the minimum and maximum value of the IntProvider
    // To add more fields into your TrunkPlacer/FoliagePlacer/TreeDecorator etc., use multiple .and calls
    //
    // For an example of creating your own type of codec, see the IntProvider.createValidatingCodec method's source
    public static final Codec<WitcheryFoliagePlacer> CODEC = RecordCodecBuilder.create(instance ->
            fillFoliagePlacerFields(instance)
                    .and(IntProvider.createValidatingCodec(1, 512).fieldOf("foliage_height").forGetter(WitcheryFoliagePlacer::getFoliageHeight))
                    .apply(instance, WitcheryFoliagePlacer::new));

    private final IntProvider foliageHeight;

    public WitcheryFoliagePlacer(IntProvider radius, IntProvider offset, IntProvider foliageHeight) {
        super(radius, offset);

        this.foliageHeight = foliageHeight;
    }

    public IntProvider getFoliageHeight() {
        return this.foliageHeight;
    }

    @Override
    protected FoliagePlacerType<?> getType() {
        return ModPlacers.WITCHERY_FOLIAGE_PLACER;
    }

    @Override
    protected void generate(TestableWorld world, BlockPlacer placer, Random random, TreeFeatureConfig config, int trunkHeight, TreeNode treeNode, int foliageHeight, int radius, int offset) {
        int par1 = treeNode.getCenter().getX();
        int par2 = treeNode.getCenter().getY();
        int par3 = treeNode.getCenter().getZ();
        float par4 = treeNode.getFoliageRadius();
        byte par5 = (byte)1;

        int i1 = (int)((double)par4 + 0.618D);
        byte b1 = otherCoordPairs[par5];
        byte b2 = otherCoordPairs[par5 + 3];
        int[] aint = new int[]{par1, par2, par3};
        int[] aint1 = new int[]{0, 0, 0};
        int j1 = -i1;
        int k1 = -i1;

        for(aint1[par5] = aint[par5]; j1 <= i1; ++j1) {
            aint1[b1] = aint[b1] + j1;
            k1 = -i1;

            while(k1 <= i1) {
                double d0 = Math.pow((double)Math.abs(j1) + 0.5D, 2.0D) + Math.pow((double)Math.abs(k1) + 0.5D, 2.0D);
                if(d0 > (double)(par4 * par4)) {
                    ++k1;
                } else {
                    aint1[b2] = aint[b2] + k1;
                    Block l1 = ((World)world).getBlockState(new BlockPos(aint1[0], aint1[1], aint1[2])).getBlock();
                    if(l1 != Blocks.AIR && l1 != ModBlocks.ALDER_LEAVES && l1 != ModBlocks.HAWTHORN_LEAVES) {
                        ++k1;
                    } else {
                        placeFoliageBlock(world, placer, random, config, new BlockPos(aint1[0], aint1[1], aint1[2]));
                        ++k1;
                    }
                }
            }
        }
    }

    @Override
    public int getRandomHeight(Random random, int trunkHeight, TreeFeatureConfig config) {
        // Just pick the random height using the IntProvider
        return foliageHeight.get(random);
    }

    @Override
    protected boolean isInvalidForLeaves(Random random, int dx, int y, int dz, int radius, boolean giantTrunk) {
        // Our FoliagePlacer doesn't set any restrictions on leaves
        return false;
    }
}
